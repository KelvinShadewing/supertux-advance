#!/usr/bin/brux
/*===============================*\
|                                 |
|  SUPER TUX ADVANCE              |
|                                 |
|  LICENSE: GPL v3.0              |
|  AUTHOR: Kelvin Shadewing       |
|  DESC: A 16-bit game featuring  |
|    Tux the penguin.             |
|                                 |
\*===============================*/

//Game source
donut("src/util.nut")
donut("src/text.nut")
donut("src/shapes.nut")
donut("src/tilemap.nut")
donut("src/assets.nut")
donut("src/global.nut")
donut("src/controls.nut")
donut("src/menus.nut")
donut("src/gmmain.nut")
donut("src/gmplay.nut")
donut("src/gmpause.nut")
donut("src/physactor.nut")
donut("src/tux.nut")
donut("src/konqi.nut")
donut("src/items.nut")
donut("src/effects.nut")
donut("src/enemies.nut")
donut("src/bosses.nut")
donut("src/debug.nut")
donut("src/bg.nut")
donut("src/trigger.nut")
donut("src/water.nut")
donut("src/levelend.nut")
donut("src/platforms.nut")
donut("src/blocks.nut")
donut("src/weapons.nut")
donut("src/overworld.nut")
donut("src/secret.nut")
donut("src/npc.nut")
donut("src/languagemenu.nut")
donut("src/contriblevels.nut")
donut("src/save.nut")

//Load mods
local modlist = lsdir("mods")
for(local i = 0; i < modlist.len(); i++) if(modlist[i] != "." && modlist[i] != "..") donut("mods/" + modlist[i])

////////////////
//    MAIN    //
////////////////

//Detect resolution
//Aspects may not perfectly match, so the closest one will be picked
local disres = displayW().tofloat() / displayH().tofloat()
local reschoice = 0
local aspects = [(16.0 / 9.0), (8.0 / 5.0), (4.0 / 3.0)]
local resdiff = 100 //Arbitrary high starting number
for(local i = 0; i < aspects.len(); i++) {
	if(abs(disres - aspects[i]) < resdiff) {
		resdiff = abs(disres - aspects[i])
		reschoice = i
	}
}
switch(reschoice) {
	case 0:
		setResolution(320, 180)
		break
	case 1:
		setResolution(320, 200)
		break
	case 2:
		setResolution(320, 240)
		break
	//Other resolutions may be supported so default is left separate
	default:
		setResolution(320, 240)
		break
}

//Uncomment this function if you want to play at actual GBA resolution
//setResolution(240, 160)

gvScreen = newTexture(screenW(), screenH())
bgPause = newTexture(screenW(), screenH())

//Set up window
setWindowTitle("SuperTux Advance")
setWindowIcon("icon.png")
tileSearchDir.push("res")
tileSearchDir.push("res/gfx")
tileSearchDir.push("res/map")
tileSearchDir.push("res/snd")
setFPS(60)

//Load game text
if(fileExists("config.json")) config = jsonRead(fileRead("config.json"))
gvLangObj = jsonRead(fileRead("lang/en.json"))
gvLangObj = mergeTable(gvLangObj, jsonRead(fileRead("lang/" + config.lang + ".json")))

//Set difficulty strings
strDifficulty = [
	gvLangObj["difficulty-levels"]["easy"],
	gvLangObj["difficulty-levels"]["normal"],
	gvLangObj["difficulty-levels"]["hard"],
	gvLangObj["difficulty-levels"]["super"]
]

startMain()
menu = meMain
config.playerchar = "Tux"
//startPlay("res/map/mario0.json")

update()
while(!getQuit() && !gvQuit)
{
	if(getcon("pause", "press") && levelEndRunner == 0 && gvGameMode != gmMain) togglePause()
	gvGameMode()
	if(keyPress(k_tick)) debugConsole()
	update()
}
