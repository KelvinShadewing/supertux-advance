#!/usr/bin/brux
/*===============================*\
|                                 |
|  SUPER TUX ADVANCE              |
|                                 |
|  LICENSE: AGPL                  |
|  AUTHOR: Kelvin Shadewing       |
|  DESC: A 16-bit game featuring  |
|    Tux the penguin.             |
|                                 |
\*===============================*/

setWriteDir(getPrefDir("sta", "supertux-advance"))

// Game source
donut("src/util.nut")
donut("src/text.nut")
donut("src/shapes.nut")
donut("src/tilemap.nut")
donut("src/mods.nut")
donut("src/assets.nut")
donut("src/global.nut")
donut("src/physactor.nut")
donut("src/camera.nut")
donut("src/controls.nut")
donut("src/menus.nut")
donut("src/gmmain.nut")
donut("src/beam.nut")
donut("src/gmplay.nut")
donut("src/gmpause.nut")
donut("src/weapons.nut")
donut("src/player.nut")
donut("src/tux.nut")
donut("src/konqi.nut")
donut("src/midi.nut")
donut("src/surge.nut")
donut("src/cyra.nut")
donut("src/neverball.nut")
donut("src/items.nut")
donut("src/effects.nut")
donut("src/enemies.nut")
donut("src/bosses.nut")
donut("src/debug.nut")
donut("src/bg.nut")
donut("src/trigger.nut")
donut("src/water.nut")
donut("src/levelend.nut")
donut("src/platforms.nut")
donut("src/blocks.nut")
donut("src/overworld.nut")
donut("src/secret.nut")
donut("src/npc.nut")
donut("src/languagemenu.nut")
donut("src/contriblevels.nut")
donut("src/save.nut")
donut("src/zlist.nut")
donut("src/pickchar.nut")
donut("src/weather.nut")
donut("src/light.nut")
donut("src/credits.nut")
donut("src/cursor.nut")
donut("src/shop.nut")
donut("src/timeline.nut")
donut("src/spawner.nut")
donut("src/achievements.nut")
donut("src/racer.nut")
donut("src/network.nut")
donut("src/accessibility.nut")
donut("src/timeattack.nut")
donut("src/battle.nut")
donut("src/soccer.nut")
donut("src/objects.nut")

////////////////
//    MAIN    //
////////////////

if(fileExists("config.json")) config = mergeTable(config, jsonRead(fileRead("config.json")))

// Set volume
setSoundVolume(config.soundVolume)
setMusicVolume(config.musicVolume)

// Detect resolution
setDisplayAspect <- function(w) {
	setResolution(w, 240)
}

switch(config.aspect) {
	case 0:
		local disres = max(320, displayW()).tofloat() / displayH().tofloat()
		setDisplayAspect(disres * 240)
		break
	case 1:
		setDisplayAspect(320)
		break
	case 2:
		setDisplayAspect(426)
		break
	case 3:
		setDisplayAspect(560)
		break
	default:
		local disres = max(320, displayW()).tofloat() / displayH().tofloat()
		setDisplayAspect(disres * 240)
		break
}

updateDisplaySettings <- function() {
	local tempTarget = getDrawTarget()
	setDrawTarget(0)

	deleteTexture(gvScreen)
	local w = 320
	switch(config.aspect) {
		case 0:
			local disres = max(320, displayW()).tofloat() / displayH().tofloat()
			w = disres * 240
			break
		case 1:
			w = 320
			break
		case 2:
			w = 426
			break
		case 3:
			w = 560
			break
	}
	setDisplayAspect(w)
	setScalingFilter(int(config.usefilter))
	gvScreen = newTexture(screenW(), screenH())
	gvScreenW = screenW()
	setScalingFilter(0)

	gvScreenW = screenW()
	gvTextW = floor(screenW() / 6) - 1

	deleteTexture(bgPause)
	bgPause = newTexture(screenW(), screenH())

	deleteTexture(gvTempScreen)
	gvTempScreen = newTexture(screenW(), screenH())
	textureSetBlendMode(gvTempScreen, bm_blend)

	deleteTexture(gvPlayScreen)
	gvPlayScreen = newTexture(screenW(), screenH())
	textureSetBlendMode(gvPlayScreen, bm_blend)

	deleteTexture(gvPlayScreen2)
	gvPlayScreen2 = newTexture(screenW() / 2, screenH())
	textureSetBlendMode(gvPlayScreen2, bm_blend)

	deleteTexture(gvLightScreen1)
	gvLightScreen1 = newTexture(screenW(), screenH())
	textureSetBlendMode(gvLightScreen1, bm_mod)

	deleteTexture(gvLightScreen2)
	gvLightScreen2 = newTexture(screenW(), screenH())
	textureSetBlendMode(gvLightScreen2, bm_mod)

	deleteTexture(gvScreenGhost)
	gvScreenGhost = newTexture(screenW(), screenH())
	textureSetBlendMode(gvScreenGhost, bm_blend)

	setDrawTarget(tempTarget)
}


// Uncomment this function if you want to play at actual GBA resolution
// setResolution(240, 160)
// Uncomment this function if you want to play at actual NDS resolution
// setResolution(256, 192)
// Uncomment this function if you want to play at the old resolution
// setResolution(320, 180)

// The current resolution is stored because these
// functions will show different results when
// rendering to a texture.
gvScreenW = screenW()
gvScreenH = screenH()

gvTextW = floor(screenW() / 6) - 1

if(config.fullscreen) toggleFullscreen()
if(config.usefilter) setScalingFilter(1)
gvScreen = newTexture(screenW(), screenH())
setScalingFilter(0)

bgPause = newTexture(screenW(), screenH())

gvTempScreen = newTexture(screenW(), screenH())
textureSetBlendMode(gvTempScreen, bm_blend)
gvPlayScreen = newTexture(screenW(), screenH())
textureSetBlendMode(gvPlayScreen, bm_blend)
gvPlayScreen2 = newTexture(screenW() / 2, screenH())
textureSetBlendMode(gvPlayScreen2, bm_blend)
gvLightScreen1 = newTexture(screenW(), screenH())
textureSetBlendMode(gvLightScreen1, bm_mod)
gvLightScreen2 = newTexture(screenW(), screenH())
textureSetBlendMode(gvLightScreen2, bm_mod)
gvScreenGhost = newTexture(screenW(), screenH())
textureSetBlendMode(gvScreenGhost, bm_blend)

// Set up window
setWindowTitle("SuperTux Advance")
setWindowIcon("icon.png")
tileSearchDir.push("res")
tileSearchDir.push("res/gfx")
tileSearchDir.push("res/map")
tileSearchDir.push("res/snd")
setFPS(60)

// Load game text

gvLangObj = jsonRead(fileRead("lang/en.json"))
gvLangObj = mergeTable(gvLangObj, jsonRead(fileRead("lang/" + config.lang + ".json")))

if(fileExists("save/_achievements.json")) gvUnlockedAchievements = jsonRead(fileRead("save/_achievements.json"))

// Set difficulty strings
strDifficulty = [
	gvLangObj["difficulty-levels"]["easy"],
	gvLangObj["difficulty-levels"]["normal"],
	gvLangObj["difficulty-levels"]["hard"],
	gvLangObj["difficulty-levels"]["super"]
]

// Load mods
local modlist = lsdir("mods")
for(local i = 0; i < modlist.len(); i++) if(modlist[i] != "." && modlist[i] != ".." && modlist[i].find(".nut") != null) donut("mods/" + modlist[i])

print("Launching SuperTux Advance v." + gvVersion + "...")
startMain()
menu = meMain
game.playerChar = "Tux"

// Testing
// game.playerChar = "Surge"
// gotoTest()

// Load contrib initializers
if(fileExists("contrib")) {
	foreach(i in lsdir("contrib")) if(fileExists("contrib/" + i + "/init.nut")) donut("contrib/" + i + "/init.nut")
}

drawCRT <- function() {
	if(config.scanlines == 1) {
		for(local i = 0; i < screenH(); i += 2) {
			setDrawColor(0x40)
			drawLine(0, i, screenW(), i)
			setDrawColor(0xffffff10)
			drawLine(0, i + 1, screenW(), i + 1)
		}
	}

	if(config.scanlines == 2) {
		for(local i = 0; i <= screenW() / 240; i++)
			drawSprite(sprCRT, 0, i * 240, 0)
	}
}

gameCycle <- function() {
	if(keyPress(k_f11)) {
		toggleFullscreen()
		config.fullscreen = !config.fullscreen
		fileWrite("config.json", jsonWrite(config))
	}

	if(joyCount() > 1 && game.playerChar2 != "") {
		config.joy.index = 0
		config.joy2.index = 1
	}
	else {
		if(gvNumPlayers > 1)
			config.joy.index = 1
		else
			config.joy.index = 0
		config.joy2.index = 0
	}

	// Update automatic controls
	updateAutocon()

	if(getcon("pause", "press") && (levelEndRunner == 0 || levelEndRunner == 1) && gvGameMode != gmMain)
		togglePause()
	if(keyPress(k_tick))
		toggleConsole()
	gvGameMode()
}

gameRender <- function() {
	setDrawTarget(gvScreen)
	drawCRT()
	resetDrawTarget()
	drawImage(gvScreen, 0, 0)
}

gameExit <- function() {}

while(!getQuit() && !gvQuit) {
	gameCycle()
	gameRender()
	update()
}
