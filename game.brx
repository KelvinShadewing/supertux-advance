#!/usr/bin/brux
/*===============================*\
|                                 |
|  SUPER TUX ADVANCE              |
|                                 |
|  LICENSE: AGPL                  |
|  AUTHOR: Kelvin Shadewing       |
|  DESC: A 16-bit game featuring  |
|    Tux the penguin.             |
|                                 |
\*===============================*/

setWriteDir(getPrefDir("sta", "supertux-advance"))

//Game source
require("src/util.nut")
require("src/text.nut")
require("src/shapes.nut")
require("src/tilemap.nut")
require("src/mods.nut")
require("src/assets.nut")
require("src/global.nut")
require("src/physactor.nut")
require("src/camera.nut")
require("src/controls.nut")
require("src/menus.nut")
require("src/gmmain.nut")
require("src/beam.nut")
require("src/gmplay.nut")
require("src/gmpause.nut")
require("src/weapons.nut")
require("src/player.nut")
require("src/tux.nut")
require("src/konqi.nut")
require("src/midi.nut")
require("src/surge.nut")
require("src/cyra.nut")
require("src/neverball.nut")
require("src/items.nut")
require("src/effects.nut")
require("src/enemies.nut")
require("src/bosses.nut")
require("src/debug.nut")
require("src/bg.nut")
require("src/trigger.nut")
require("src/water.nut")
require("src/levelend.nut")
require("src/platforms.nut")
require("src/blocks.nut")
require("src/overworld.nut")
require("src/secret.nut")
require("src/npc.nut")
require("src/languagemenu.nut")
require("src/contriblevels.nut")
require("src/save.nut")
require("src/zlist.nut")
require("src/pickchar.nut")
require("src/weather.nut")
require("src/light.nut")
require("src/credits.nut")
require("src/cursor.nut")
require("src/shop.nut")
require("src/timeline.nut")
require("src/spawner.nut")
require("src/achievements.nut")
require("src/racer.nut")
require("src/network.nut")
require("src/accessibility.nut")
require("src/timeattack.nut")
require("src/battle.nut")

////////////////
//    MAIN    //
////////////////

if(fileExists("config.json")) config = mergeTable(config, jsonRead(fileRead("config.json")))
if(joyCount() > 1) {
	config.joy.index = 1
	config.joy2.index = 0
}
else {
	config.joy.index = 1
	config.joy2.index = 0
}

//Set volume
setSoundVolume(config.soundVolume)
setMusicVolume(config.musicVolume)

//Detect resolution
//Aspects may not perfectly match, so the closest one will be picked
local disres = displayW().tofloat() / displayH().tofloat()
local reschoice = 0
local aspects = [(1.0 / 2.0), (16.0 / 9.0), (5.0 / 3.0), (4.0 / 3.0), 1.0]
local resdiff = 100 //Arbitrary high starting number
for(local i = 0; i < aspects.len(); i++) {
	if(abs(disres - aspects[i]) < resdiff) {
		resdiff = abs(disres - aspects[i])
		reschoice = i
	}
}
switch(reschoice) {
	case 0:
		setResolution(480, 240)
		break
	case 1:
		setResolution(426, 240)
		break
	case 2:
		setResolution(400, 240)
		break
	case 3:
		setResolution(320, 240)
		break
	case 4:
		setResolution(240, 240)
		break
	
	//Other resolutions may be supported so default is left separate
	default:
		setResolution(320, 240)
		break
}

//Uncomment this function if you want to play at actual GBA resolution
//setResolution(240, 160)
//Uncomment this function if you want to play at actual NDS resolution
//setResolution(256, 192)
//Uncomment this function if you want to play at the old resolution
//setResolution(320, 180)

gvScreenW = screenW()
gvScreenH = screenH()

gvTextW = floor(screenW() / 6) - 1

if(config.fullscreen) toggleFullscreen()
if(config.usefilter) setScalingFilter(1)
gvScreen = newTexture(screenW(), screenH())
setScalingFilter(0)

bgPause = newTexture(screenW(), screenH())

gvTempScreen = newTexture(screenW(), screenH())
textureSetBlendMode(gvTempScreen, bm_blend)
gvPlayScreen = newTexture(screenW(), screenH())
textureSetBlendMode(gvPlayScreen, bm_blend)
gvPlayScreen2 = newTexture(screenW() / 2, screenH())
textureSetBlendMode(gvPlayScreen2, bm_blend)
gvLightScreen1 = newTexture(screenW(), screenH())
textureSetBlendMode(gvLightScreen1, bm_mod)
gvLightScreen2 = newTexture(screenW(), screenH())
textureSetBlendMode(gvLightScreen2, bm_mod)
gvScreenGhost = newTexture(screenW(), screenH())
textureSetBlendMode(gvScreenGhost, bm_blend)

//Set up window
setWindowTitle("SuperTux Advance")
setWindowIcon("icon.png")
tileSearchDir.push("res")
tileSearchDir.push("res/gfx")
tileSearchDir.push("res/map")
tileSearchDir.push("res/snd")
setFPS(60)

//Load game text

gvLangObj = jsonRead(fileRead("lang/en.json"))
gvLangObj = mergeTable(gvLangObj, jsonRead(fileRead("lang/" + config.lang + ".json")))

if(fileExists("save/_achievements.json")) gvUnlockedAchievements = jsonRead(fileRead("save/_achievements.json"))

//Set difficulty strings
strDifficulty = [
	gvLangObj["difficulty-levels"]["easy"],
	gvLangObj["difficulty-levels"]["normal"],
	gvLangObj["difficulty-levels"]["hard"],
	gvLangObj["difficulty-levels"]["super"]
]

//Load mods
local modlist = lsdir("mods")
for(local i = 0; i < modlist.len(); i++) if(modlist[i] != "." && modlist[i] != "..") donut("mods/" + modlist[i])

print("Launching SuperTux Advance v." + gvVersion + "...")
startMain()
menu = meMain
game.playerChar = "Tux"

//Testing Midi
//game.playerChar = "Neverball"
//gotoTest()

//Load contrib initializers
if(fileExists("contrib")) {
	foreach(i in lsdir("contrib")) if(fileExists("contrib/" + i + "/init.nut")) donut("contrib/" + i + "/init.nut")
}

::gameCycle <- function() {
	/*
	if(keyPress(k_f11)) {
		toggleFullscreen()
		config.fullscreen = !config.fullscreen
		fileWrite("config.json", jsonWrite(config))
	}
	*/

	//Update automatic controls
	updateAutocon()

	if(getcon("pause", "press") && (levelEndRunner == 0 || levelEndRunner == 1) && gvGameMode != gmMain)
		togglePause()
	if(keyPress(k_tick))
		toggleConsole()
	gvGameMode()
}

::gameRender <- function() {
	resetDrawTarget()
	drawImage(gvScreen, 0, 0)
}

::gameExit <- function() {}

while(!getQuit() && !gvQuit) {
	gameCycle()
	gameRender()
	update()
}